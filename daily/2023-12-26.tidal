-- fmadsr :: Int -> Pattern Double -> Patern Double -> Pattern Double -> Pattern Double -> ControlPattern
fmads op a d s =
  fmeglevel op 1 1 # -- peak is always 1
  fmegrate op 1 a # -- attack is slope of first segment
  fmeglevel op 2 s # -- sustain is level end of segment 2 and 3
  fmegrate op 2 d # -- decay is slope of second segment
  fmeglevel op 3 s # -- sustain is level end of segment 2 and 3
  fmegrate op 3 0.0000001 # -- sustain is level end of segment 2 and 3, so slope is 0
  fmegrate op 4 10 # -- shouldn't reach release
  fmeglevel op 4 0  -- always decay to 0

fmamps a b c d e f = fmamp 1 a # fmamp 2 b # fmamp 3 c # fmamp 4 d # fmamp 5 e # fmamp 6 f
fmratios a b c d e f = fmratio 1 a # fmratio 2 b # fmratio 3 c # fmratio 4 d # fmratio 5 e # fmratio 6 f
fmdetunes a b c d e f = fmdetune 1 a # fmdetune 2 b # fmdetune 3 c # fmdetune 4 d # fmdetune 5 e # fmdetune 6 f

d1 $ superimpose (# detune "<0.01 0.02 0.03 0.02>")
  $ fast 4
  $ iter 4
  $ rolledBy 0.75
  $ (n "<c5'maj'<6 4> d5'maj'6 e5'min'<7 5> d5'min'<4 6 4 8>>" + n 2)
  # delay (choose [0.1, 0.1, 0.2, 0.5, 0.75])
  # delayfb (range 0.25 0.75 (slow 16 saw)) # delayt 0.25 # lock 1
  # s "superfm"
  # fmamps 1 0 1 0 0 0
  # fmfeedback 0.1
  # fmratios 1 1 0.5 1 1 1
  # fmdetunes 0 0 1 0 0 0
  # fmmod 1 1 (range 0.8 1 (slow 16 sine))
  # fmmod 1 2  (range 1 2 (slow 12 $ sine))   -- fmod a b Pattern  = modulate op a with op b..
  # fmmod 1 3  (range 1 2 (slow 6 $ rotL 0.5 $ sine))
  # fmmod 3 2  (range 1 3 (slow 4 $ rotL 0.25 $ sine))
  # fmads 1 10 0.1 0.5  -- fast attack (30ms), standard decay to 0.8
  # fmads 2 1 0.3 0 -- slow attack (300ms), no decay
  # fmads 3 10 0.5 0.2 -- slow attack (300ms), no decay
  # legato (range 1.1 1.6 $ slow 16 saw)
  # fadeTime 0.1
  # verb 0.1 0.1 0.2 0.2
