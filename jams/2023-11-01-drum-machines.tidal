:t spaceOut
d1 $ every 4 (chop 3) $ n " [0 [~ 0]] [~ 0] [~ 0] [0 ~] " # s "lt:1"
hush

-- (un)fix : apply function to events that (do not) match condition
-- contrast: apply two functions to events, choosing between them whether they
-- match condition or not
-- contrastBy: you can use different comparator condition on pattern rather than `==`
d1 $ fix (silent) (s "cp") $
 sew "t(11,16)" (n "0 .. 15" # s "future") (s "cp:3*16" # speed sine + 1.5)
hush
:t list

d1 $ fast 2 $
  stack [
    sound "cp(<3 5>, 8)" # speed sine + 1.0 # pan 0.3,
    rotR 0.125 $ euclidInv "<3 5>" 8 $ s "future",
    every 8 (fast 3) $ s "[~hh]*4" # pan 0.7
  ]
hush
d1
$ s "superfm*4"
    # n 0
    # octave 5
    # gain 0.8
    # amp1 1
    # amp2 0
    # amp3 0
    # amp4 0
    # amp5 0
    # amp6 0
    # mod12 "0 1 2" -- modulate carrier with envelope affected operator
    # ratio2 0.25
    # egrate21 10 -- put the envelope on operator 2
    # eglevel22 "0.1 0.5 1"
    # egrate23 "1 10 0.1"
    # eglevel23 1.5
    # room 1
    # feedback 1
    # mod11 1

-- inhabit: assign strings to patterns, then use those strings in mininotation
d1 $ append (sound "bd*2 sn") (sound "arpy jvbass*2")
d1 $ cat [sound "bd*2 sn" , sound "arpy jvbass*2"]
hush
-- <> can be used as a bin-op form of overlay
-- any function can be turned into a wet-dry with layer
layerWet fn wet = layer [(# gain wet), fn . (# gain (1.0-wet))]
d1 $ swingBy (1/3) 3 $ sound "hh*8"


hush
-- TODO: struct/mask/sew/stictch
-- TODO: timescale
-- TODO: https://club.tidalcycles.org/t/sharing-custom-functions/1032/4
-- TODO: https://github.com/ghalestrilo/libtidal
-- TODO: more investigations on tonality need some functions for manipulating melody
